name: CI

on: [ push ]

jobs:
  clippy:
    name: Clippy validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust nightly with clippy
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - name: Output Rust toolchain info
        run: |
          cargo +nightly --version --verbose
          rustc +nightly --version
          cargo +nightly clippy --version

      - name: Run clippy
        uses: clechasseur/rs-clippy-check@v2
        with:
          args: --all-targets --all-features -- -D warnings

  format:
    name: Rustfmt check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust nightly with rustfmt
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Output Rust toolchain info
        run: |
          cargo +nightly --version --verbose
          rustc +nightly --version
          cargo +nightly fmt --version

      - name: Run Rustfmt
        uses: clechasseur/rs-fmt-check@v1
        with:
          args: --all

  build:
    name: Release build for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }} on ${{ matrix.os }}${{ matrix.ignore-lock && ' without Cargo.lock' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ 1.68.2, stable, beta, nightly ]
        os: [ ubuntu, macos, windows ]
        ignore-lock: [ false, true ]
        include:
          - experimental: false
          - toolchain: beta
            experimental: true
          - toolchain: nightly
            experimental: true
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Remove Cargo.lock
        if: ${{ matrix.ignore-lock }}
        run: rm Cargo.lock

      - name: Install Rust toolchain ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Output Rust toolchain info
        run: |
          cargo --version --verbose
          rustc --version

      - name: Run release build
        uses: clechasseur/rs-cargo@v1
        with:
          command: build
          args: --all-features --release

  tests:
    name: Tests for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }} on ${{ matrix.os }}${{ matrix.ignore-lock && ' without Cargo.lock' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ 1.68.2, stable, beta, nightly ]
        os: [ ubuntu, macos, windows ]
        ignore-lock: [ false, true ]
        include:
          - experimental: false
          - toolchain: beta
            experimental: true
          - toolchain: nightly
            experimental: true
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Remove Cargo.lock
        if: ${{ matrix.ignore-lock }}
        run: rm Cargo.lock

      - name: Install Rust toolchain ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Output Rust toolchain info
        run: |
          cargo --version --verbose
          rustc --version

      - name: Run checks
        uses: clechasseur/rs-cargo@v1
        with:
          command: check
          args: --workspace --all-targets --all-features

      - name: Run tests
        uses: clechasseur/rs-cargo@v1
        with:
          command: test
          args: --workspace --all-features

  tarpaulin:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install cargo-tarpaulin
        uses: clechasseur/rs-cargo@v1
        with:
          command: binstall
          args: --no-confirm --no-symlinks cargo-tarpaulin

      - name: Run cargo-tarpaulin
        uses: clechasseur/rs-cargo@v1
        with:
          command: tarpaulin
          args: --workspace --engine llvm --tests --out Xml

      - name: Upload code coverage results to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: cobertura.xml
